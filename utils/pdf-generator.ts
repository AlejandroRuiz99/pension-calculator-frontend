import jsPDF from 'jspdf'
import { RespuestaSimulacion } from '@/types/pension'
import { formatearEuros, formatearPorcentaje } from './calculations'

export interface DatosInforme {
  simulacion: RespuestaSimulacion
  datosPersonales: {
    fechaNacimiento: string
    sexo: string
    tipoJubilacion: string
    fechaJubilacion: string
  }
  datosLaborales: {
    diasTotal: number
    diasUltimos15: number
    baseReguladora: number
    otrasRentas: number
  }
}

export const generarPDFResultados = (datos: DatosInforme): void => {
  const doc = new jsPDF()
  const { simulacion, datosPersonales, datosLaborales } = datos
  
  // Configuraci√≥n
  const margenIzquierdo = 20
  const margenSuperior = 20
  let yPos = margenSuperior
  
  // Funci√≥n auxiliar para a√±adir texto
  const addText = (text: string, x: number = margenIzquierdo, fontSize: number = 12, style: 'normal' | 'bold' = 'normal') => {
    doc.setFontSize(fontSize)
    doc.setFont('helvetica', style)
    doc.text(text, x, yPos)
    yPos += fontSize * 0.5 + 2
  }
  
  // Funci√≥n auxiliar para a√±adir l√≠nea
  const addLine = () => {
    yPos += 5
    doc.line(margenIzquierdo, yPos, 190, yPos)
    yPos += 10
  }
  
  // Funci√≥n auxiliar para nueva p√°gina
  const checkNewPage = (spaceNeeded: number = 20) => {
    if (yPos + spaceNeeded > 280) {
      doc.addPage()
      yPos = margenSuperior
    }
  }
  
  // CABECERA
  doc.setFillColor(59, 130, 246) // Azul
  doc.rect(0, 0, 210, 40, 'F')
  
  doc.setTextColor(255, 255, 255)
  doc.setFontSize(20)
  doc.setFont('helvetica', 'bold')
  doc.text('SIMULACI√ìN DE PENSI√ìN DE JUBILACI√ìN', margenIzquierdo, 25)
  
  doc.setFontSize(12)
  doc.setFont('helvetica', 'normal')
  doc.text('Espa√±a - Sistema de Seguridad Social', margenIzquierdo, 35)
  
  doc.setFontSize(10)
  doc.setFont('helvetica', 'italic')
  doc.text('Informe generado por: Compromiso Legal - Despacho de Abogados', 120, 35)
  
  // Fecha del informe
  doc.setTextColor(0, 0, 0)
  yPos = 60
  addText(`Fecha del informe: ${new Date().toLocaleDateString('es-ES')}`, 140, 10)
  addText(`Versi√≥n del sistema: ${simulacion.version_sistema}`, 140, 10)
  
  yPos = 80
  
  // INFORMACI√ìN DEL DESPACHO
  doc.setFillColor(240, 248, 255) // Azul muy claro
  doc.rect(margenIzquierdo - 5, yPos - 5, 170, 35, 'F')
  doc.setTextColor(30, 64, 175) // Azul oscuro
  addText('üìã INFORME GENERADO POR COMPROMISO LEGAL', margenIzquierdo, 12, 'bold')
  doc.setTextColor(55, 65, 81)
  addText('Despacho de Abogados especializado en Derecho de la Seguridad Social.', margenIzquierdo, 10)
  addText('Este documento es una simulaci√≥n orientativa basada en la normativa vigente.', margenIzquierdo, 10)
  addText('Para asesoramiento personalizado, contacte con nuestro despacho.', margenIzquierdo, 10)
  
  doc.setTextColor(0, 0, 0)
  yPos += 15
  
  // DATOS PERSONALES
  addText('DATOS PERSONALES', margenIzquierdo, 14, 'bold')
  addLine()
  
  addText(`Fecha de nacimiento: ${new Date(datosPersonales.fechaNacimiento).toLocaleDateString('es-ES')}`)
  addText(`Sexo: ${datosPersonales.sexo === 'M' ? 'Masculino' : 'Femenino'}`)
  addText(`Edad actual: ${simulacion.edad_jubilacion_anos.toFixed(1)} a√±os`)
  addText(`Fecha de jubilaci√≥n deseada: ${new Date(datosPersonales.fechaJubilacion).toLocaleDateString('es-ES')}`)
  addText(`Tipo de jubilaci√≥n: ${obtenerNombreTipoJubilacion(datosPersonales.tipoJubilacion)}`)
  
  yPos += 10
  
  // DATOS LABORALES
  checkNewPage(60)
  addText('DATOS LABORALES', margenIzquierdo, 14, 'bold')
  addLine()
  
  addText(`D√≠as cotizados (total): ${datosLaborales.diasTotal} d√≠as (${(datosLaborales.diasTotal / 365).toFixed(1)} a√±os)`)
  addText(`D√≠as cotizados (√∫ltimos 15 a√±os): ${datosLaborales.diasUltimos15} d√≠as (${(datosLaborales.diasUltimos15 / 365).toFixed(1)} a√±os)`)
  addText(`Base reguladora: ${formatearEuros(datosLaborales.baseReguladora)}`)
  if (datosLaborales.otrasRentas > 0) {
    addText(`Otras rentas anuales: ${formatearEuros(datosLaborales.otrasRentas)}`)
  }
  
  yPos += 10
  
  // RESULTADO DE LA VALIDACI√ìN
  checkNewPage(60)
  addText('RESULTADO DE LA VALIDACI√ìN', margenIzquierdo, 14, 'bold')
  addLine()
  
  if (simulacion.validacion.es_valido) {
    doc.setTextColor(34, 197, 94) // Verde
    addText('‚úì SOLICITUD V√ÅLIDA - Cumple todos los requisitos', margenIzquierdo, 12, 'bold')
  } else {
    doc.setTextColor(239, 68, 68) // Rojo
    addText('‚úó SOLICITUD INV√ÅLIDA - No cumple los requisitos', margenIzquierdo, 12, 'bold')
  }
  
  doc.setTextColor(0, 0, 0)
  
  // Errores si los hay
  if (simulacion.validacion.errores.length > 0) {
    yPos += 5
    addText('Errores encontrados:', margenIzquierdo, 12, 'bold')
    simulacion.validacion.errores.forEach(error => {
      addText(`‚Ä¢ ${error.mensaje}`, margenIzquierdo + 10, 10)
    })
  }
  
  // C√ÅLCULO DE LA PENSI√ìN
  if (simulacion.validacion.es_valido && simulacion.calculo) {
    yPos += 10
    checkNewPage(80)
    
    addText('C√ÅLCULO DE LA PENSI√ìN', margenIzquierdo, 14, 'bold')
    addLine()
    
    const calculo = simulacion.calculo
    
    // Resultado principal
    doc.setFillColor(240, 253, 244) // Verde claro
    doc.rect(margenIzquierdo - 5, yPos - 5, 170, 25, 'F')
    
    doc.setTextColor(34, 197, 94)
    addText(`PENSI√ìN MENSUAL: ${formatearEuros(calculo.pension_final)}`, margenIzquierdo, 16, 'bold')
    doc.setTextColor(0, 0, 0)
    
    yPos += 10
    
    // Detalles del c√°lculo
    addText('Detalles del c√°lculo:', margenIzquierdo, 12, 'bold')
    yPos += 5
    
    // Porcentaje total aplicable
    const porcentajeTotal = (calculo.porcentaje_anos_cotizados * calculo.porcentaje_anticipacion_demora) / 100
    addText(`‚Ä¢ PORCENTAJE TOTAL APLICABLE: ${formatearPorcentaje(porcentajeTotal)}`, margenIzquierdo, 12, 'bold')
    addText(`  (${formatearPorcentaje(calculo.porcentaje_anos_cotizados)} √ó ${formatearPorcentaje(calculo.porcentaje_anticipacion_demora)})`, margenIzquierdo + 5, 10)
    yPos += 3
    
    addText(`‚Ä¢ Porcentaje por a√±os cotizados: ${formatearPorcentaje(calculo.porcentaje_anos_cotizados)}`)
    addText(`‚Ä¢ Porcentaje por anticipaci√≥n/demora: ${formatearPorcentaje(calculo.porcentaje_anticipacion_demora)}`)
    addText(`‚Ä¢ Pensi√≥n antes de topes: ${formatearEuros(calculo.pension_antes_topes)}`)
    addText(`‚Ä¢ Pensi√≥n m√≠nima aplicable: ${formatearEuros(calculo.pension_minima_aplicable)}`)
    addText(`‚Ä¢ Pensi√≥n m√°xima aplicable: ${formatearEuros(calculo.pension_maxima_aplicable)}`)
    
    if (calculo.complemento_minimos > 0) {
      addText(`‚Ä¢ Complemento a m√≠nimos: ${formatearEuros(calculo.complemento_minimos)}`)
    }
    
    // Datos espec√≠ficos
    if (calculo.datos_especificos) {
      yPos += 10
      checkNewPage(40)
      addText('Informaci√≥n espec√≠fica:', margenIzquierdo, 12, 'bold')
      
      Object.entries(calculo.datos_especificos).forEach(([clave, valor]) => {
        if (clave === 'tanto_alzado' && valor > 0) {
          addText(`‚Ä¢ Tanto alzado (pago √∫nico): ${formatearEuros(valor as number)}`, margenIzquierdo + 5)
        } else if (clave === 'meses_demora') {
          addText(`‚Ä¢ Meses de demora: ${valor}`, margenIzquierdo + 5)
        } else if (clave === 'meses_anticipacion') {
          addText(`‚Ä¢ Meses de anticipaci√≥n: ${valor}`, margenIzquierdo + 5)
        }
      })
    }
  }
  
  // REGLAS APLICADAS
  if (simulacion.reglas_aplicadas.length > 0) {
    yPos += 15
    checkNewPage(60)
    
    addText('REGLAS APLICADAS', margenIzquierdo, 14, 'bold')
    addLine()
    
    simulacion.reglas_aplicadas.forEach(regla => {
      checkNewPage(15)
      addText(`‚Ä¢ ${regla}`, margenIzquierdo, 9)
    })
  }
  
  // OBSERVACIONES
  if (simulacion.observaciones.length > 0) {
    yPos += 15
    checkNewPage(40)
    
    addText('OBSERVACIONES', margenIzquierdo, 14, 'bold')
    addLine()
    
    simulacion.observaciones.forEach(obs => {
      checkNewPage(15)
      addText(`‚Ä¢ ${obs}`, margenIzquierdo, 10)
    })
  }
  
  // MARCA DE AGUA Y PIE DE P√ÅGINA
  const totalPages = doc.getNumberOfPages()
  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i)
    
    // MARCA DE AGUA
    doc.setTextColor(240, 240, 240) // Gris muy claro
    doc.setFontSize(30)
    doc.setFont('helvetica', 'bold')
    
    // Centrar la marca de agua
    const pageWidth = doc.internal.pageSize.width
    const pageHeight = doc.internal.pageSize.height
    const centerX = pageWidth / 2
    const centerY = pageHeight / 2
    
    // Texto diagonal usando rotaci√≥n simple
    doc.text('COMPROMISO LEGAL', centerX, centerY - 20, {
      angle: 45,
      align: 'center'
    })
    doc.text('DESPACHO DE ABOGADOS', centerX, centerY, {
      angle: 45,
      align: 'center'
    })
    doc.text('SIMULACI√ìN ORIENTATIVA', centerX, centerY + 20, {
      angle: 45,
      align: 'center'
    })
    
    // PIE DE P√ÅGINA
    doc.setFontSize(8)
    doc.setTextColor(128, 128, 128)
    doc.text('Compromiso Legal - Despacho de Abogados', margenIzquierdo, 290)
    doc.text(`P√°gina ${i} de ${totalPages}`, 180, 290)
    doc.text('Este documento es una simulaci√≥n orientativa generada por Compromiso Legal', margenIzquierdo, 285)
  }
  
  // Generar nombre del archivo
  const fechaActual = new Date().toISOString().split('T')[0]
  const tipoJub = datosPersonales.tipoJubilacion.replace('_', '-')
  const nombreArchivo = `compromiso-legal-simulacion-pension-${tipoJub}-${fechaActual}.pdf`
  
  // Descargar
  doc.save(nombreArchivo)
}

// Funci√≥n auxiliar para obtener nombre legible del tipo de jubilaci√≥n
const obtenerNombreTipoJubilacion = (tipo: string): string => {
  const nombres: Record<string, string> = {
    'ordinaria': 'Jubilaci√≥n Ordinaria',
    'anticipada_voluntaria': 'Jubilaci√≥n Anticipada Voluntaria',
    'anticipada_involuntaria': 'Jubilaci√≥n Anticipada Involuntaria',
    'parcial': 'Jubilaci√≥n Parcial',
    'demorada': 'Jubilaci√≥n Demorada'
  }
  
  return nombres[tipo] || tipo
}
